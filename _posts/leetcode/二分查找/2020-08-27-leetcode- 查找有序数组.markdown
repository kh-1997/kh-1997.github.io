---
layout:     post
title:      "查找有序数组"
subtitle:   "二分查找"
date:       2020-08-28 12:00:00
author:     "KH"
header-img: "img/post-bg-apple-event-2015.jpg"
tags:
    - 二分查找
    - 产品
---

> 

## 题目描述

给出一个有序的数组和一个目标值，如果数组中存在该目标值，则返回该目标值的下标。如果数组中不存在该目标值，则返回如果将该目标值插入这个数组应该插入的位置的下标
假设数组中没有重复项。
下面给出几个样例：
[1,3,5,6], 5 → 2
[1,3,5,6], 2 → 1
[1,3,5,6], 7 → 4
[1,3,5,6], 0 → 0

Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

You may assume no duplicates in the array.

Here are few examples.
[1,3,5,6], 5 → 2
[1,3,5,6], 2 → 1
[1,3,5,6], 7 → 4
[1,3,5,6], 0 → 0

### 题目思路

二分查找的左边界法则编写代码，唯一不同的就是当A[mid] == target的时候，return mid;

```vim
  public class Solution {
    /**
     * 
     * @param A int整型一维数组 
     * @param target int整型 
     * @return int整型
     */
    public int searchInsert (int[] A, int target) {
        // write code here
        int left = 0;
        int right = A.length-1;
        while(left<=right){
            int mid = left+(right-left)/2;
            if(A[mid]==target){
                return mid;
            }else if(A[mid]<target){
                left = mid+1;
            }else if(A[mid]>target){
                right = mid -1;
            }
        }
        if(left==A.length||A[left]!=target){
            return left;
        }
        return -1;
    }
}
```





