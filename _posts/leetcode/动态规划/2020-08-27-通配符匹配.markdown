---
layout:     post
title:      "通配符模式匹配"
subtitle:   "动态规划"
date:       2020-08-30 12:00:00
author:     "KH"
header-img: "img/post-bg-apple-event-2015.jpg"
tags:
    - 动态规划
    - 产品
---

> 

## 题目描述

请实现支持'?'and'*'.的通配符模式匹配

> '?' 可以匹配任何单个字符。
> '*' 可以匹配任何字符序列（包括空序列）。

返回两个字符串是否匹配

函数声明为：

bool isMatch(const char *s, const char *p)

下面给出一些样例：

> isMatch("aa","a") → false
> isMatch("aa","aa") → true
> isMatch("aaa","aa") → false
> isMatch("aa", "*") → true
> isMatch("aa", "a*") → true
> isMatch("ab", "?*") → true
> isMatch("aab", "c*a*b") → false

### 题目思路

动态规划

状态定义`dp[i][j]表示s[0 ~ i-1]子串能否与p[0~j-1]匹配`

初始状态: `dp[0][0] = true; dp[0][j] = p[j-1]=='*'&&dp[0][j-1];`

递推方程： 

`if(s[i]==p[j]||p[j]=='?' dp[i][j] =dp[i-1][j-1]  `

`if(p[j]=='*') dp[i][j]=dp[i][j-1]||dp[i-1][j]`(用或者不用两种情况)

```vim
public class Solution {
    public boolean isMatch(String s, String p) {
        if((s == null && p == null) || (s.length() == 0 && p.length() == 0))
            return true;
        if(p.length() == 0 && s.length() != 0)
            return false;
        boolean[][] dp = new boolean[s.length()+1][p.length()+1];
        dp[0][0] = true;
        for(int j=1;j<=p.length();j++){
            if(p.charAt(j-1)=='*'){
                dp[0][j] = dp[0][j-1];
            }
        }
        for(int i=1;i<=s.length();i++){
            for(int j=1;j<=p.length();j++){
                if(s.charAt(i-1)==p.charAt(j-1)||p.charAt(j-1)=='?'){
                    dp[i][j] = dp[i-1][j-1];
                }
                if(p.charAt(j-1)=='*'){
                    dp[i][j] = dp[i][j-1]||dp[i-1][j];
                }
            }
        }
        return dp[s.length()][p.length()];
    }
}
```





