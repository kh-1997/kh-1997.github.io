---
layout:     post
title:      "链表转化成平衡二叉搜索树"
subtitle:   "递归"
date:       2020-08-27 12:00:00
author:     "KH"
header-img: "img/post-bg-apple-event-2015.jpg"
tags:
    - 二叉树
    - 产品
---

> 这篇文章转载牛客网

### 题目描述

给定一个单链表，其中的元素按升序排序，请将它转化成平衡二叉搜索树（BST）

Given a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.

示例1

#### 输入

复制

```
{-1,0,1,2}
```

#### 输出

复制

```
{1,0,2,-1}
```

### 题目思路

利用快慢指针以及二叉树的前序遍历解题即可。

当head==tail  return null;

当快慢指针!=tail时，找出slow作为root；

head,slow作为左边的链表，slow.next到tail作为右面的链表

递归即可。

```vim
    public TreeNode sortedListToBST (ListNode head) {
        // write code here
        return sort(head,null);
    }
    
    public TreeNode sort(ListNode head,ListNode tail){
        if(head==tail) return null;
        ListNode fast = head;
        ListNode slow = head;
        while(fast!=tail&&fast.next!=tail){
            fast = fast.next.next;
            slow = slow.next;
        }
        TreeNode root = new TreeNode(slow.val);
        root.left = sort(head,slow);
        root.right = sort(slow.next,tail);
        return root;
    }
```



## 题目描述

给出一个升序排序的数组，将其转化为平衡二叉搜索树（BST）.

示例1

## 输入

复制

```
[-1,0,1,2]
```

## 输出

复制

```
{1,0,2,-1}
```

### 解题思路

```
import java.util.*;

/*
 * public class TreeNode {
 *   int val = 0;
 *   TreeNode left = null;
 *   TreeNode right = null;
 * }
 */

public class Solution {
    /**
     * 
     * @param num int整型一维数组 
     * @return TreeNode类
     */
    public TreeNode sortedArrayToBST (int[] num) {
        // write code here
        if(num==null) return null;
        return sort(num,0,num.length-1);
    }
    public TreeNode sort(int[]num,int start,int end){
        if(start>end) return null;
        int mid = start+(end-start+1)/2;
        TreeNode root = new TreeNode(num[mid]);
        root.left = sort(num,start,mid-1);
        root.right = sort(num,mid+1,end);
        return root;
    }
}
```

