---
layout:     post
title:      "129. 求根到叶子节点数字之和"
subtitle:   "回溯解法"
date:       2020-08-10 12:00:00
author:     "KH"
header-img: "img/post-bg-apple-event-2015.jpg"
tags:
    - 二叉树
    - 产品
---

> 这篇文章转载牛客网

### 题目链接

中文链接 (https://leetcode-cn.com/problems/sum-root-to-leaf-numbers/)

### 题目描述

给定一个二叉树，它的每个结点都存放一个 0-9 的数字，每条从根到叶子节点的路径都代表一个数字。

例如，从根到叶子节点路径 1->2->3 代表数字 123。

计算从根到叶子节点生成的所有数字之和。

说明: 叶子节点是指没有子节点的节点。

示例 1:

输入: [1,2,3]
​    1
   / \
  2   3
输出: 25
解释:
从根到叶子节点路径 1->2 代表数字 12.
从根到叶子节点路径 1->3 代表数字 13.
因此，数字总和 = 12 + 13 = 25.

### 题目思路

利用回溯法解题即可。

当root==null return;

当root.left==null&&root,right==null    添加节点，记录改路径，删除节点

否则 添加节点 进入左子节点查找，进入右子节点查找，删除节点

```vim
List<Integer> result = new ArrayList<Integer>();
    public int sumNumbers (TreeNode root) {
        // write code here
        if(root==null){
            return 0;
        }
        boolean[] visit = new boolean[10];
        ArrayList<Integer>list = new ArrayList<>();
        dfs(root,list);
        int sum = 0;
        for(int i:result){
            sum += i;
        }
        return sum;
    }
    
    public void dfs(TreeNode root,ArrayList<Integer>list){
        if(root==null) return;
        if(root.left==null&&root.right==null){
            list.add(root.val);
            int res = 0;
            for(int i=0;i<list.size();i++){
                res=10*res + list.get(i);
            }
            result.add(res);
            list.remove(list.size()-1);
            return;
        }
        list.add(root.val);
        dfs(root.left,list);
        dfs(root.right,list);
        list.remove(list.size()-1);
    }
```







